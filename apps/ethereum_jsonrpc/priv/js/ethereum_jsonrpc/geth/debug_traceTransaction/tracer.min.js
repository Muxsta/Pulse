{
    callStack: [{}],
    step(s,t){void 0!==s.getError()?this.fault(s,t):this.success(s,t)},
    fault(r,t){void 0===this.topCall().error&&this.putError(r)},
    putError(t){this.callStack.length>1?this.putErrorInTopCall(t):this.putErrorInBottomCall(t)},
    putErrorInTopCall(l){const t=this.callStack.pop();this.putErrorInCall(l,t),this.pushChildCall(t)},
    putErrorInBottomCall(t){const o=this.bottomCall();this.putErrorInCall(t,o)},
    putErrorInCall(t,e){e.error=t.getError(),void 0!==e.gasBigInt&&(e.gasUsedBigInt=e.gasBigInt),delete e.outputOffset,delete e.outputLength},
    topCall(){return this.callStack[this.callStack.length-1]},
    bottomCall(){return this.callStack[0]},
    pushChildCall(l){const s=this.topCall();void 0===s.calls&&(s.calls=[]),s.calls.push(l)},
    pushGasToTopCall(s){const t=this.topCall();void 0===t.gasBigInt&&(t.gasBigInt=s.getGas()),t.gasUsedBigInt=t.gasBigInt-s.getGas()-s.getCost()},
    success(e,s){const c=e.op.toString();switch(this.beforeOp(e,s),c){case"CREATE":this.createOp(e);break;case"CREATE2":this.create2Op(e);break;case"SELFDESTRUCT":this.selfDestructOp(e,s);break;case"CALL":case"CALLCODE":case"DELEGATECALL":case"STATICCALL":this.callOp(e,c);break;case"REVERT":this.revertOp()}},
    beforeOp(t,e){if(t.getDepth()<this.callStack.length){const o=this.callStack.pop(),s=t.stack.peek(0);s.equals(0)?void 0===o.error&&(o.error="internal failure"):"create"===o.type||"create2"===o.type?(o.createdContractAddressHash=toHex(toAddress(s.toString(16))),o.createdContractCode=toHex(e.getCode(toAddress(s.toString(16))))):o.output=toHex(t.memory.slice(o.outputOffset,o.outputOffset+o.outputLength)),delete o.outputOffset,delete o.outputLength,this.pushChildCall(o)}else this.pushGasToTopCall(t)},
    createOp(e){const t=e.stack.peek(1).valueOf(),c=t+e.stack.peek(2).valueOf(),a=e.stack.peek(0),s={type:"create",from:toHex(e.contract.getAddress()),init:toHex(e.memory.slice(t,c)),valueBigInt:bigInt(a.toString(10))};this.callStack.push(s)},
    create2Op(e){const t=e.stack.peek(1).valueOf(),c=t+e.stack.peek(2).valueOf(),a=e.stack.peek(0),s={type:"create2",from:toHex(e.contract.getAddress()),init:toHex(e.memory.slice(t,c)),valueBigInt:bigInt(a.toString(10))};this.callStack.push(s)},
    selfDestructOp(t,e){const s=t.contract.getAddress();this.pushChildCall({type:"selfdestruct",from:toHex(s),to:toHex(toAddress(t.stack.peek(0).toString(16))),gasBigInt:t.getGas(),gasUsedBigInt:t.getCost(),valueBigInt:e.getBalance(s)})},
    callOp(t,s){const c=toAddress(t.stack.peek(1).toString(16));isPrecompiled(c)||this.callCustomOp(t,s,c)},
    callCustomOp(e,t,a){const c="DELEGATECALL"===t||"STATICCALL"===t?0:1,s=e.stack.peek(2+c).valueOf(),o=s+e.stack.peek(3+c).valueOf(),l={type:"call",callType:t.toLowerCase(),from:toHex(e.contract.getAddress()),to:toHex(a),input:toHex(e.memory.slice(s,o)),outputOffset:e.stack.peek(4+c).valueOf(),outputLength:e.stack.peek(5+c).valueOf()};switch(t){case"CALL":case"CALLCODE":l.valueBigInt=bigInt(e.stack.peek(2));break;case"DELEGATECALL":break;case"STATICCALL":l.valueBigInt=bigInt.zero;break;default:throw"Unknown custom call op "+t}this.callStack.push(l)},
    revertOp(){this.topCall().error="execution reverted"},
    result(e,t){const n=this.ctxToResult(e,t),c=this.filterNotUndefined(n),i=this.sequence(c,[],c.valueBigInt,[]).callSequence;return this.encodeCallSequence(i)},
    ctxToResult(t,e){var a;switch(t.type){case"CALL":a=this.ctxToCall(t);break;case"CREATE":a=this.ctxToCreate(t,e);break;case"CREATE2":a=this.ctxToCreate2(t,e)}return a},
    ctxToCall(t){const o={type:"call",callType:"call",from:toHex(t.from),to:toHex(t.to),valueBigInt:bigInt(t.value.toString(10)),gasBigInt:bigInt(t.gas),gasUsedBigInt:bigInt(t.gasUsed),input:toHex(t.input)};return this.putBottomChildCalls(o),this.putErrorOrOutput(o,t),o},
    putErrorOrOutput(t,r){const o=this.error(r);void 0!==o?t.error=o:t.output=toHex(r.output)},
    ctxToCreate(t,e){const i={type:"create",from:toHex(t.from),init:toHex(t.input),valueBigInt:bigInt(t.value.toString(10)),gasBigInt:bigInt(t.gas),gasUsedBigInt:bigInt(t.gasUsed)};return this.putBottomChildCalls(i),this.putErrorOrCreatedContract(i,t,e),i},
    ctxToCreate2(t,e){const i={type:"create2",from:toHex(t.from),init:toHex(t.input),valueBigInt:bigInt(t.value.toString(10)),gasBigInt:bigInt(t.gas),gasUsedBigInt:bigInt(t.gasUsed)};return this.putBottomChildCalls(i),this.putErrorOrCreatedContract(i,t,e),i},
    putBottomChildCalls(l){const t=this.bottomCall().calls;void 0!==t&&(l.calls=t)},
    putErrorOrCreatedContract(t,r,e){const o=this.error(r);void 0!==o?t.error=o:(t.createdContractAddressHash=toHex(r.to),"0x"!=toHex(r.input)?t.createdContractCode=toHex(e.getCode(r.to)):t.createdContractCode="0x")},
    error(r){var o;const t=this.bottomCall().error;if(void 0!==t)o=t;else{const t=r.error;void 0!==t&&(o=t)}return o},
    filterNotUndefined(l){for(var e in l)void 0===l[e]&&delete l[e];if(void 0!==l.calls)for(var i=0;i<l.calls.length;i++)l.calls[i]=this.filterNotUndefined(l.calls[i]);return l},
    sequence(e,l,c,a){const n=e.calls;delete e.calls,e.traceAddress=a,"call"===e.type&&"delegatecall"===e.callType&&(e.valueBigInt=c);var t=l.concat([e]);if(void 0!==n)for(var s=0;s<n.length;s++){t=this.sequence(n[s],t,e.valueBigInt,a.concat([s])).callSequence}return{callSequence:t}},
    encodeCallSequence(e){for(var n=0;n<e.length;n++)this.encodeCall(e[n]);return e},
    encodeCall(t){return this.putValue(t),this.putGas(t),this.putGasUsed(t),t},
    putValue(t){const e=t.valueBigInt;delete t.valueBigInt,t.value="0x"+e.toString(16)},
    putGas(t){const g=t.gasBigInt;delete t.gasBigInt,void 0===g&&(g=bigInt.zero),t.gas="0x"+g.toString(16)},
    putGasUsed(s){const t=s.gasUsedBigInt;delete s.gasUsedBigInt,void 0===t&&(t=bigInt.zero),s.gasUsed="0x"+t.toString(16)}
}